name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  MIX_ENV: test

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest]
        otp: ['24.3', '25.3', '26.2']
        # TODO: Re-enable macOS once setup-beam supports it properly
        # exclude:
        #   # macOS builds are expensive, only test latest OTP
        #   - os: macos-latest
        #     otp: '24.3'
        #   - os: macos-latest
        #     otp: '25.3'
    
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Setup Erlang/OTP
      uses: erlef/setup-beam@v1.18.0
      with:
        otp-version: ${{ matrix.otp }}
        rebar3-version: '3.22.1'
        install-hex: true
        install-rebar: true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsodium-dev cmake build-essential pkg-config
        # Verify installations
        cmake --version
        pkg-config --exists libsodium && echo "libsodium found" || echo "libsodium not found"
    
    - name: Cache rebar3 dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/rebar3
          _build
        key: rebar3-${{ matrix.os }}-${{ matrix.otp }}-${{ hashFiles('rebar.config') }}
        restore-keys: |
          rebar3-${{ matrix.os }}-${{ matrix.otp }}-
    
    - name: Clean previous builds
      run: |
        make clean
        rm -rf _build
    
    - name: Build C components first
      run: |
        echo "Building C components..."
        cd c_src
        cmake . -DCMAKE_BUILD_TYPE=Release
        make
        cd ..
        ls -la priv/
    
    - name: Compile Erlang components
      run: |
        echo "Compiling Erlang components..."
        rebar3 compile
    
    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        make test-unit
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        make test-integration
    
    - name: Generate coverage report
      run: |
        echo "Generating coverage report..."
        make test-unit-cover
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./tmp/cover/cover.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

  test-wrappers:
    name: Test ${{ matrix.wrapper }} wrapper
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        wrapper: [elixir, gleam]
    
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Setup Erlang/OTP and Elixir
      uses: erlef/setup-beam@v1.18.0
      with:
        otp-version: '26.2'
        elixir-version: '1.15.7'
        rebar3-version: '3.22.1'
        install-hex: true
        install-rebar: true
    
    - name: Install Gleam
      if: matrix.wrapper == 'gleam'
      run: |
        curl -sSL https://github.com/gleam-lang/gleam/releases/download/v1.0.0/gleam-v1.0.0-x86_64-unknown-linux-musl.tar.gz | tar -xz
        sudo mv gleam /usr/local/bin/
        gleam --version
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsodium-dev cmake build-essential pkg-config
        # Verify installations
        cmake --version
        pkg-config --exists libsodium && echo "libsodium found" || echo "libsodium not found"
    
    - name: Build main NIF
      run: |
        echo "Building main NIF..."
        # First compile Erlang components to ensure NIF is built
        rebar3 compile
        # Then build C components
        cd c_src
        cmake . -DCMAKE_BUILD_TYPE=Release
        make
        cd ..
        ls -la priv/
        echo "NIF files built:"
        find priv/ -name "*.so" -o -name "*.dll" -o -name "*.dylib" | head -10
    
    - name: Test Elixir wrapper
      if: matrix.wrapper == 'elixir'
      run: |
        cd wrappers/elixir
        # Copy NIF files to wrapper priv directory
        mkdir -p priv
        cp -f ../../priv/*.so priv/ 2>/dev/null || cp -f ../../priv/*.dylib priv/ 2>/dev/null || cp -f ../../priv/*.dll priv/ 2>/dev/null || echo "No NIF files found to copy"
        ls -la priv/
        echo "Installing dependencies..."
        mix deps.get
        echo "Compiling..."
        mix compile
        echo "Running tests..."
        mix test --trace
    
    - name: Test Gleam wrapper
      if: matrix.wrapper == 'gleam'
      run: |
        cd wrappers/gleam
        # Copy NIF files to wrapper priv directory
        mkdir -p priv
        cp -f ../../priv/*.so priv/ 2>/dev/null || cp -f ../../priv/*.dylib priv/ 2>/dev/null || cp -f ../../priv/*.dll priv/ 2>/dev/null || echo "No NIF files found to copy"
        ls -la priv/
        echo "Downloading dependencies..."
        gleam deps download
        echo "Building..."
        gleam build
        echo "Running tests..."
        gleam test

  security:
    name: Security scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.16.1
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  lint:
    name: Lint and format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Setup Erlang/OTP
      uses: erlef/setup-beam@v1.18.0
      with:
        otp-version: '26.2'
        rebar3-version: '3.22.1'
        install-hex: true
        install-rebar: true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsodium-dev cmake build-essential pkg-config
    
    - name: Build C components for linting
      run: |
        cd c_src
        cmake . -DCMAKE_BUILD_TYPE=Release
        make
        cd ..
    
    - name: Compile Erlang for linting
      run: rebar3 compile
    
    - name: Check formatting
      run: rebar3 format --verify
    
    - name: Run Dialyzer
      run: rebar3 dialyzer || echo "Dialyzer warnings detected but not failing build"

  publish:
    name: Publish to Hex.pm
    runs-on: ubuntu-latest
    needs: [test, test-wrappers, lint]  # Removed security from critical path
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Setup Erlang/OTP and Elixir
      uses: erlef/setup-beam@v1.18.0
      with:
        otp-version: '26.2'
        elixir-version: '1.15.7'
        rebar3-version: '3.22.1'
        install-hex: true
        install-rebar: true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsodium-dev cmake build-essential pkg-config
    
    - name: Build C components
      run: |
        cd c_src
        cmake . -DCMAKE_BUILD_TYPE=Release
        make
        cd ..
    
    - name: Compile Erlang
      run: rebar3 compile
    
    - name: Publish Erlang package
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: rebar3 hex publish --yes
    
    - name: Publish Elixir package
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: |
        cd wrappers/elixir
        mix deps.get
        mix hex.publish --yes
    
    - name: Publish Gleam package
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: |
        cd wrappers/gleam
        gleam deps download
        gleam publish --yes

  docker:
    name: Build and test Docker images
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4.1.1
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: make docker-build
    
    - name: Test Docker images
      run: make docker-test
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    
    - name: Push Docker images
      if: github.event_name == 'release'
      run: |
        docker tag libsignal-protocol-nif:latest ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:latest
        docker tag libsignal-protocol-nif:latest ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:${{ github.event.release.tag_name }}
        docker push ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:${{ github.event.release.tag_name }}