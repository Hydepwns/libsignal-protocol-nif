name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  MIX_ENV: test

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        otp: ['24.3', '25.3', '26.2']
        exclude:
          # macOS builds are expensive, only test latest OTP
          - os: macos-latest
            otp: '24.3'
          - os: macos-latest
            otp: '25.3'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Erlang/OTP
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}
        rebar3-version: '3.22.1'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsodium-dev cmake build-essential
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libsodium cmake
    
    - name: Cache rebar3 dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/rebar3
          _build
        key: rebar3-${{ matrix.os }}-${{ matrix.otp }}-${{ hashFiles('rebar.config') }}
        restore-keys: |
          rebar3-${{ matrix.os }}-${{ matrix.otp }}-
    
    - name: Compile
      run: make build
    
    - name: Run unit tests
      run: make test-unit
    
    - name: Run integration tests
      run: make test-integration
    
    - name: Generate coverage report
      run: make test-unit-cover
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tmp/cover/cover.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-wrappers:
    name: Test ${{ matrix.wrapper }} wrapper
    runs-on: ubuntu-latest
    strategy:
      matrix:
        wrapper: [elixir, gleam]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Erlang/OTP and Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: '26.2'
        elixir-version: '1.15.7'
        rebar3-version: '3.22.1'
    
    - name: Install Gleam
      if: matrix.wrapper == 'gleam'
      run: |
        curl -sSL https://github.com/gleam-lang/gleam/releases/download/v0.32.4/gleam-v0.32.4-x86_64-unknown-linux-musl.tar.gz | tar -xz
        sudo mv gleam /usr/local/bin/
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsodium-dev cmake build-essential
    
    - name: Build main NIF
      run: make build
    
    - name: Test Elixir wrapper
      if: matrix.wrapper == 'elixir'
      run: |
        cd wrappers/elixir
        mix deps.get
        mix test
    
    - name: Test Gleam wrapper
      if: matrix.wrapper == 'gleam'
      run: |
        cd wrappers/gleam
        gleam deps download
        gleam test

  security:
    name: Security scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        # Add security scanning tools here
        echo "Security scanning placeholder"
    
    - name: Check for known vulnerabilities
      run: |
        # Add dependency vulnerability scanning
        echo "Vulnerability scanning placeholder"

  lint:
    name: Lint and format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Erlang/OTP
      uses: erlef/setup-beam@v1
      with:
        otp-version: '26.2'
        rebar3-version: '3.22.1'
    
    - name: Check formatting
      run: rebar3 format --verify
    
    - name: Run Dialyzer
      run: rebar3 dialyzer

  publish:
    name: Publish to Hex.pm
    runs-on: ubuntu-latest
    needs: [test, test-wrappers, security, lint]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Erlang/OTP and Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: '26.2'
        elixir-version: '1.15.7'
        rebar3-version: '3.22.1'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsodium-dev cmake build-essential
    
    - name: Build
      run: make build
    
    - name: Publish Erlang package
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: rebar3 hex publish --yes
    
    - name: Publish Elixir package
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: |
        cd wrappers/elixir
        mix hex.publish --yes
    
    - name: Publish Gleam package
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: |
        cd wrappers/gleam
        gleam publish --yes

  docker:
    name: Build and test Docker images
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: make docker-build
    
    - name: Test Docker images
      run: make docker-test
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push Docker images
      if: github.event_name == 'release'
      run: |
        docker tag libsignal-protocol-nif:latest ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:latest
        docker tag libsignal-protocol-nif:latest ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:${{ github.event.release.tag_name }}
        docker push ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/libsignal-protocol-nif:${{ github.event.release.tag_name }} 